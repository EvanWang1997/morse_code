Morse Code Decrypt

To implement a program that processes Morse Code as intended, we broke down the problem into small steps that are easier to implement:
- A data structure that recognizes Morse code sequences and alphanumeric equivalents
- Given a repeating sstring of Morse code, convert it to alphanumeric equivalent and extract one occurrence of the message
- A data structure that stores words of a dictionary and can determine if a sequence of numbers and letters form a proper English word
- Given the extracted message, return all combinations of words that can be formed

Morse data structure
It made sense for us to implement a BST to store the Morse code translation since Morse consists solely of '.' and '-' commonly referred to as "dit" and "dah".
Therefore for a Char v, a MorseBST Node is either Empty or in the form Node v (MorseBST v) (MorseBST v). For a sequence '.-', we would start at the root and travel to the dit branch and then the dah branch to return the corresponding letter 'a'.

                                                                root
                                                         (dit) /    \ (dah)
                                                             'E'    'T'
                                                            /  |    |  \
                                                          'I' 'A'  'N' 'M'

Morse to  English
We followed the steps below to proceed throught the Morse to English conversion:
- Agree on convention for writing morse code
- Read original text file into array of morse characters to be further separated
- Add functionality that understands how to parse letters
- Convert all morse characters into english letters
- Locate end of array, assume end of array corresponds to end of a messsage
- Backtrack from end of array until matching length of characters is found, return one chunk of letters

Dictionary data structure
Our final version of the dictionary data structure is a Trie with a branch for siblings and a second for children. A Trie node is either Empty or in the form
TrieNode v w (DicTrie v w) (DicTrie v w) where v is a Char and w is a Bool that indicates the end of a word. To store the dictionary, we first found a txt file of most used English words and parsed it as a list of strings to insert each word.

                                                     (sibling)
                                                  'b' ------- 'd'
                                           (child) |           |
                                                  'a' - 'o'   'a'
                                                   |     |     |
                                                  'b'   'x'   'd'
                                                   |
                                                  'y'

Example based on https://en.wikipedia.org/wiki/Trie

Word parsing
We followed the steps below to implement the word parsing:
- Begin by importing dictionary into navigable tree data structure 
- Create test function that takes in a word, and returns true if word exists inside the tree
- Create actual function that takes in an array, and creates a separation for the sentences
- Create function that prunes sentences that contains words that do not correspond to matching dictionary values
- Writes possible sentences with words that were accepted by the tree

Results and Analysis
Both data structures are able to search in O(m) where m is the length of the string to process. The first implementation of the dictionary data structure consisted of a node with 26 branches for each letter, however, we quickly noticed that a lot of Empty nodes are created when storing the dictionary which expends a lot of memory exponentially. We also encountered issues in the word parsing/breaking where leftover letters that donot form a word were included in the result. due to time constraints, we decided to apply a filter to the result considering the time we already invested in resolving the issue. The current state of the program achieves what we wanted but travels through the result one extra time due to this issue.

Discussion






